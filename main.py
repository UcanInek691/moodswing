import cv2
import numpy as np
from deepface import DeepFace
import os
import time
from datetime import datetime
import sys
import webbrowser
from googleapiclient.discovery import build
import random

class YouTubeMoodPlaylistAI:
    def __init__(self):
        self.youtube = None
        self.current_mood = None
        self.mood_history = []
        
        # YouTube API settings (replace with your own API key)
        # G√úVENLIK UYARISI: Bu bilgiler environment variables'da saklanmalƒ±
        self.YOUTUBE_API_KEY = os.getenv("YOUTUBE_API_KEY", "YOUR_API_HERE")
        
        # Mood to search keywords mapping
        self.mood_keywords = {
            'happy': [
                'happy songs', 'upbeat music', 'feel good songs', 'pop music',
                'dance music', 'energetic songs', 'positive vibes', 'cheerful music'
            ],
            'sad': [
                'sad songs', 'emotional music', 'heartbreak songs', 'melancholy music',
                'acoustic ballads', 'slow songs', 'indie sad', 'piano ballads'
            ],
            'angry': [
                'rock music', 'metal songs', 'aggressive music', 'hard rock',
                'punk rock', 'intense music', 'powerful songs', 'heavy metal'
            ],
            'surprise': [
                'unique music', 'experimental songs', 'world music', 'jazz fusion',
                'electronic music', 'indie music', 'alternative songs', 'ambient music'
            ],
            'fear': [
                'dark ambient', 'atmospheric music', 'cinematic music', 'suspense music',
                'classical horror', 'drone music', 'minimal music', 'eerie sounds'
            ],
            'disgust': [
                'alternative rock', 'grunge music', 'industrial music', 'noise music',
                'experimental rock', 'post punk', 'dark wave', 'gothic music'
            ],
            'neutral': [
                'chill music', 'background music', 'lo-fi hip hop', 'study music',
                'ambient music', 'instrumental music', 'relaxing songs', 'indie pop'
            ]
        }
        
        # Genre-specific search terms for better results
        self.mood_genres = {
            'happy': ['pop', 'disco', 'funk', 'reggae', 'afrobeat'],
            'sad': ['indie', 'folk', 'blues', 'soul', 'singer-songwriter'],
            'angry': ['rock', 'metal', 'punk', 'hardcore', 'nu-metal'],
            'surprise': ['jazz', 'fusion', 'world', 'experimental', 'electronic'],
            'fear': ['ambient', 'dark ambient', 'classical', 'soundtrack', 'drone'],
            'disgust': ['industrial', 'noise', 'post-punk', 'gothic', 'darkwave'],
            'neutral': ['chillout', 'downtempo', 'lo-fi', 'acoustic', 'indie']
        }
    
    def setup_youtube(self):
        """Initialize YouTube API connection"""
        try:
            if not self.YOUTUBE_API_KEY or self.YOUTUBE_API_KEY == "YOUR_YOUTUBE_API_KEY_HERE":
                print("‚ùå YouTube API anahtarƒ± eksik!")
                print("üí° YouTube Data API v3 anahtarƒ± alƒ±n:")
                print("   1. Google Cloud Console'a gidin")
                print("   2. Yeni proje olu≈üturun")
                print("   3. YouTube Data API v3'√º etkinle≈ütirin")
                print("   4. API anahtarƒ± olu≈üturun")
                print("   5. YOUTUBE_API_KEY environment variable olarak ayarlayƒ±n")
                return False
            
            self.youtube = build('youtube', 'v3', developerKey=self.YOUTUBE_API_KEY)
            
            # Test the connection
            test_response = self.youtube.search().list(
                q='test',
                part='snippet',
                maxResults=1,
                type='video'
            ).execute()
            
            print("‚úÖ YouTube API'ye ba≈üarƒ±yla baƒülandƒ±!")
            return True
            
        except Exception as e:
            print(f"‚ùå YouTube API baƒülantƒ± hatasƒ±: {str(e)}")
            if "quotaExceeded" in str(e):
                print("‚ö†Ô∏è YouTube API quota'nƒ±z doldu. Yarƒ±n tekrar deneyin.")
            elif "keyInvalid" in str(e):
                print("‚ö†Ô∏è YouTube API anahtarƒ±nƒ±z ge√ßersiz.")
            return False
    
    def detect_emotion_from_camera(self, duration=5):
        """Detect emotion from webcam"""
        cap = cv2.VideoCapture(0)
        if not cap.isOpened():
            print("‚ùå Kamera a√ßƒ±lamadƒ±! Kamera baƒülƒ± mƒ± kontrol edin.")
            return 'neutral'
        
        # Kamera ayarlarƒ±
        cap.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
        cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)
        
        emotions_detected = []
        print(f"üì∑ Duygu tespiti ba≈üladƒ±... {duration} saniye boyunca kameraya bakƒ±n!")
        
        start_time = time.time()
        frame_count = 0
        
        try:
            while time.time() - start_time < duration:
                ret, frame = cap.read()
                if not ret:
                    print("‚ùå Kamera frame'i okunamadƒ±!")
                    break
                
                frame_count += 1
                
                # Her 10 frame'de bir analiz yap (performans i√ßin)
                if frame_count % 10 == 0:
                    try:
                        # Frame'i RGB'ye √ßevir (DeepFace RGB bekler)
                        rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                        
                        result = DeepFace.analyze(
                            rgb_frame, 
                            actions=['emotion'], 
                            enforce_detection=False,
                            silent=True
                        )
                        
                        # DeepFace'in yeni versiyonlarƒ±nda result bir liste d√∂ner
                        if isinstance(result, list):
                            result = result[0]
                        
                        dominant_emotion = max(result['emotion'], key=result['emotion'].get)
                        emotions_detected.append(dominant_emotion)
                        
                        # Display emotion on frame
                        cv2.putText(frame, f"Duygu: {dominant_emotion.title()}", 
                                    (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
                        
                    except Exception as emotion_error:
                        print(f"‚ö†Ô∏è Duygu analiz hatasƒ±: {emotion_error}")
                        emotions_detected.append('neutral')
                
                # Show remaining time
                remaining = int(duration - (time.time() - start_time))
                cv2.putText(frame, f"Kalan sure: {remaining}s", 
                            (10, 70), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 0, 0), 2)
                
                cv2.imshow('Duygu Tespiti (ESC ile cik)', frame)
                
                key = cv2.waitKey(1) & 0xFF
                if key == 27:  # ESC key
                    break
                    
        except KeyboardInterrupt:
            print("\n‚ö†Ô∏è Kullanƒ±cƒ± tarafƒ±ndan durduruldu.")
        finally:
            cap.release()
            cv2.destroyAllWindows()
        
        if emotions_detected:
            self.current_mood = max(set(emotions_detected), key=emotions_detected.count)
            confidence = emotions_detected.count(self.current_mood) / len(emotions_detected)
            self.mood_history.append({
                'mood': self.current_mood,
                'timestamp': datetime.now().isoformat(),
                'confidence': confidence
            })
            print(f"üé≠ Tespit edilen duygu: {self.current_mood.title()} (G√ºven: {confidence:.1%})")
            return self.current_mood
        
        print("‚ö†Ô∏è Duygu tespit edilemedi, 'neutral' kullanƒ±lƒ±yor.")
        return 'neutral'
    
    def search_youtube_songs(self, mood, limit=20):
        """Search YouTube for songs based on mood"""
        if not self.youtube:
            print("‚ùå YouTube API baƒülantƒ±sƒ± yok!")
            return []
        
        try:
            # Get search keywords for this mood
            keywords = self.mood_keywords.get(mood, ['music'])
            genres = self.mood_genres.get(mood, ['music'])
            
            all_videos = []
            search_terms = keywords + [f"{genre} music" for genre in genres]
            
            # Perform multiple searches to get diverse results
            for search_term in search_terms[:5]:  # Limit API calls
                try:
                    print(f"üîç Arama yapƒ±lƒ±yor: '{search_term}'")
                    
                    search_response = self.youtube.search().list(
                        q=search_term,
                        part='snippet',
                        maxResults=min(10, limit // len(search_terms[:5]) + 2),
                        type='video',
                        videoCategoryId='10',  # Music category
                        order='relevance',
                        regionCode='TR'  # Turkish region for better local results
                    ).execute()
                    
                    for item in search_response.get('items', []):
                        video_info = {
                            'title': item['snippet']['title'],
                            'channel': item['snippet']['channelTitle'],
                            'video_id': item['id']['videoId'],
                            'url': f"https://www.youtube.com/watch?v={item['id']['videoId']}",
                            'thumbnail': item['snippet']['thumbnails']['medium']['url'],
                            'description': item['snippet']['description'][:100] + '...',
                            'published': item['snippet']['publishedAt'][:10]
                        }
                        all_videos.append(video_info)
                    
                    time.sleep(0.1)  # Rate limiting
                    
                except Exception as search_error:
                    print(f"‚ö†Ô∏è Arama hatasƒ± '{search_term}': {search_error}")
                    continue
            
            # Remove duplicates and shuffle
            unique_videos = []
            seen_ids = set()
            for video in all_videos:
                if video['video_id'] not in seen_ids:
                    unique_videos.append(video)
                    seen_ids.add(video['video_id'])
            
            # Shuffle and limit results
            random.shuffle(unique_videos)
            result = unique_videos[:limit]
            
            print(f"‚úÖ {len(result)} video bulundu!")
            return result
            
        except Exception as e:
            print(f"‚ùå YouTube arama hatasƒ±: {str(e)}")
            if "quotaExceeded" in str(e):
                print("‚ö†Ô∏è YouTube API quota'nƒ±z doldu.")
            return []
    
    def create_playlist_file(self, mood, videos):
        """Create a local playlist file with YouTube links"""
        if not videos:
            print("‚ùå Playlist olu≈üturulamƒ±yor: Video bulunamadƒ±!")
            return None
        
        try:
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            filename = f"playlist_{mood}_{timestamp}.txt"
            
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(f"üéµ {mood.title()} Ruh Hali Playlist\n")
                f.write(f"üìÖ Olu≈üturulma: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n")
                f.write("=" * 60 + "\n\n")
                
                for i, video in enumerate(videos, 1):
                    f.write(f"{i:2d}. {video['title']}\n")
                    f.write(f"    Kanal: {video['channel']}\n")
                    f.write(f"    Link: {video['url']}\n")
                    f.write(f"    Tarih: {video['published']}\n\n")
                
                f.write("\n" + "=" * 60 + "\n")
                f.write("üí° ƒ∞pucu: Linklere tƒ±klayarak ≈üarkƒ±larƒ± YouTube'da a√ßabilirsiniz!\n")
            
            print(f"‚úÖ Playlist dosyasƒ± olu≈üturuldu: {filename}")
            print(f"üìä {len(videos)} video eklendi")
            
            return filename
            
        except Exception as e:
            print(f"‚ùå Playlist dosyasƒ± olu≈üturma hatasƒ±: {str(e)}")
            return None
    
    def play_youtube_playlist(self, videos, auto_play=False):
        """Open YouTube videos in browser"""
        if not videos:
            print("‚ùå √áalƒ±nacak video yok!")
            return
        
        print(f"\nüéµ {len(videos)} video bulundu!")
        print("\nPlaylist:")
        print("-" * 60)
        
        for i, video in enumerate(videos[:10], 1):  # Show first 10
            print(f"{i:2d}. {video['title'][:50]}...")
            print(f"    {video['channel']}")
        
        if len(videos) > 10:
            print(f"    ... ve {len(videos) - 10} video daha")
        
        print(f"\nSe√ßenekler:")
        print("1. ƒ∞lk videoyu tarayƒ±cƒ±da a√ß")
        print("2. Playlist'i rastgele √ßal")
        print("3. Belirli bir videoyu se√ß")
        print("4. T√ºm linkleri g√∂ster")
        print("5. Playlist dosyasƒ± olu≈ütur")
        print("6. Geri d√∂n")
        
        try:
            choice = input("\nSe√ßiminiz (1-6): ").strip()
            
            if choice == '1':
                print(f"üåê A√ßƒ±lƒ±yor: {videos[0]['title']}")
                webbrowser.open(videos[0]['url'])
                
            elif choice == '2':
                random_video = random.choice(videos)
                print(f"üé≤ Rastgele se√ßim: {random_video['title']}")
                webbrowser.open(random_video['url'])
                
            elif choice == '3':
                print("\nMevcut videolar:")
                for i, video in enumerate(videos[:20], 1):  # Show first 20
                    print(f"{i:2d}. {video['title'][:60]}")
                
                try:
                    video_idx = int(input(f"\nVideo se√ßin (1-{min(20, len(videos))}): ")) - 1
                    if 0 <= video_idx < len(videos):
                        selected = videos[video_idx]
                        print(f"üåê A√ßƒ±lƒ±yor: {selected['title']}")
                        webbrowser.open(selected['url'])
                    else:
                        print("‚ùå Ge√ßersiz se√ßim!")
                except ValueError:
                    print("‚ùå L√ºtfen ge√ßerli bir sayƒ± girin!")
                    
            elif choice == '4':
                print("\nüîó T√ºm video linkleri:")
                print("-" * 80)
                for i, video in enumerate(videos, 1):
                    print(f"{i:2d}. {video['title']}")
                    print(f"    {video['url']}")
                    print()
                    
            elif choice == '5':
                return self.create_playlist_file(self.current_mood or 'mixed', videos)
                
            elif choice == '6':
                return
            else:
                print("‚ùå Ge√ßersiz se√ßim!")
                
        except KeyboardInterrupt:
            print("\n‚ö†Ô∏è ƒ∞≈ülem iptal edildi.")
    
    def show_mood_stats(self):
        """Show mood history"""
        if not self.mood_history:
            print("üìä Hen√ºz ruh hali ge√ßmi≈üi yok!")
            return
        
        print("\nüìä RUH HALƒ∞ GE√áMƒ∞≈ûƒ∞:")
        print("-" * 60)
        for entry in self.mood_history[-10:]:  # Son 10 kayƒ±t
            timestamp = entry['timestamp'][:19].replace('T', ' ')
            mood = entry['mood'].title()
            confidence = entry['confidence']
            print(f"{timestamp} | {mood:>10} | G√ºven: {confidence:.1%}")
        
        # ƒ∞statistikler
        if len(self.mood_history) > 1:
            moods = [entry['mood'] for entry in self.mood_history]
            most_common = max(set(moods), key=moods.count)
            print(f"\nüìà En yaygƒ±n ruh hali: {most_common.title()}")
    
    def test_youtube_api(self):
        """Test YouTube API functionality"""
        if not self.youtube:
            print("‚ùå YouTube API baƒülantƒ±sƒ± yok!")
            return False
        
        try:
            print("üß™ YouTube API testleri ba≈ülatƒ±lƒ±yor...")
            
            # Test 1: Simple search
            test_response = self.youtube.search().list(
                q='music',
                part='snippet',
                maxResults=3,
                type='video'
            ).execute()
            
            print(f"‚úÖ Test 1 - Basit arama: {len(test_response.get('items', []))} sonu√ß")
            
            # Test 2: Category search
            category_response = self.youtube.search().list(
                q='pop music',
                part='snippet',
                maxResults=3,
                type='video',
                videoCategoryId='10'
            ).execute()
            
            print(f"‚úÖ Test 2 - Kategori aramasƒ±: {len(category_response.get('items', []))} sonu√ß")
            
            # Show sample results
            if test_response.get('items'):
                print("\nüéµ √ñrnek sonu√ßlar:")
                for i, item in enumerate(test_response['items'][:3], 1):
                    title = item['snippet']['title'][:50]
                    channel = item['snippet']['channelTitle']
                    print(f"   {i}. {title}... - {channel}")
            
            print("üéâ T√ºm testler ba≈üarƒ±lƒ±!")
            return True
            
        except Exception as e:
            print(f"‚ùå API Test hatasƒ±: {e}")
            return False
    
    def run(self):
        """Main program loop"""
        print("üéµ YOUTUBE RUH HALƒ∞NE G√ñRE M√úZƒ∞K √ñNERƒ∞Cƒ∞Sƒ∞ üéµ")
        print("=" * 55)
        
        if not self.setup_youtube():
            print("‚ùå YouTube API'ye baƒülanƒ±lamadƒ±!")
            print("üí° API anahtarƒ±nƒ±zƒ± kontrol edin ve tekrar deneyin.")
            return
        
        while True:
            try:
                print("\nüéØ Se√ßenekler:")
                print("1. Kamera ile ruh halini tespit et ve m√ºzik √∂ner")
                print("2. Ruh halini manuel se√ß")
                print("3. Ruh hali ge√ßmi≈üini g√∂ster")
                print("4. YouTube API testleri √ßalƒ±≈ütƒ±r")
                print("5. √áƒ±kƒ±≈ü")
                
                choice = input("\nSe√ßiminiz (1-5): ").strip()
                
                if choice == '1':
                    print("\nüì∑ Kamera ba≈ülatƒ±lƒ±yor...")
                    mood = self.detect_emotion_from_camera()
                    print(f"üé≠ Tespit edilen ruh hali: {mood.title()}")
                    
                    print("üîç YouTube'da m√ºzik aranƒ±yor...")
                    videos = self.search_youtube_songs(mood)
                    
                    if videos:
                        self.play_youtube_playlist(videos)
                    else:
                        print("‚ùå Video bulunamadƒ±!")
                
                elif choice == '2':
                    print("\nüé≠ Mevcut ruh halleri:")
                    moods = list(self.mood_keywords.keys())
                    for i, mood in enumerate(moods, 1):
                        print(f"   {i}. {mood.title()}")
                    
                    try:
                        idx = int(input("\nRuh hali se√ßin (1-{}): ".format(len(moods)))) - 1
                        if 0 <= idx < len(moods):
                            mood = moods[idx]
                            self.current_mood = mood
                            print(f"üîç {mood.title()} i√ßin YouTube'da aranƒ±yor...")
                            videos = self.search_youtube_songs(mood)
                            if videos:
                                self.play_youtube_playlist(videos)
                            else:
                                print("‚ùå Video bulunamadƒ±!")
                        else:
                            print("‚ùå Ge√ßersiz se√ßim!")
                    except ValueError:
                        print("‚ùå L√ºtfen ge√ßerli bir sayƒ± girin!")
                
                elif choice == '3':
                    self.show_mood_stats()
                
                elif choice == '4':
                    self.test_youtube_api()
                
                elif choice == '5':
                    print("üëã G√∂r√º≈ümek √ºzere!")
                    break
                
                else:
                    print("‚ùå Ge√ßersiz se√ßim! L√ºtfen 1-5 arasƒ± bir sayƒ± girin.")
                    
            except KeyboardInterrupt:
                print("\n\nüëã Program sonlandƒ±rƒ±ldƒ±!")
                break
            except Exception as e:
                print(f"\n‚ùå Beklenmeyen hata: {e}")
                print("Program devam ediyor...")

if __name__ == "__main__":
    try:
        app = YouTubeMoodPlaylistAI()
        app.run()
    except KeyboardInterrupt:
        print("\nüëã Program kapatƒ±ldƒ±!")
    except Exception as e:
        print(f"‚ùå Program ba≈ülatma hatasƒ±: {e}")
        sys.exit(1)